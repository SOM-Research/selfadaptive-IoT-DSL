package IoT_runtime.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Action;
  private ConceptPresentation props_Actuator;
  private ConceptPresentation props_Actuator_Type;
  private ConceptPresentation props_AdaptationRule;
  private ConceptPresentation props_Application;
  private ConceptPresentation props_Cloud_Node;
  private ConceptPresentation props_Cluster;
  private ConceptPresentation props_Cluster_Reference;
  private ConceptPresentation props_Container;
  private ConceptPresentation props_Container_Reference;
  private ConceptPresentation props_Edge_Node;
  private ConceptPresentation props_Exp_LayerReg;
  private ConceptPresentation props_Fog_Node;
  private ConceptPresentation props_Grammar;
  private ConceptPresentation props_IoT_Device;
  private ConceptPresentation props_IoT_Device_Reference;
  private ConceptPresentation props_IoT_System;
  private ConceptPresentation props_List_Of_Metrics;
  private ConceptPresentation props_Metric;
  private ConceptPresentation props_Node;
  private ConceptPresentation props_Node_Reference;
  private ConceptPresentation props_Num_Value;
  private ConceptPresentation props_Offloading;
  private ConceptPresentation props_Operate_Actuator;
  private ConceptPresentation props_Period;
  private ConceptPresentation props_QoSCluster;
  private ConceptPresentation props_QoSContainer;
  private ConceptPresentation props_QoSNode;
  private ConceptPresentation props_QoSRegion;
  private ConceptPresentation props_QoS_Event;
  private ConceptPresentation props_Redeployment;
  private ConceptPresentation props_Region;
  private ConceptPresentation props_Region_Reference;
  private ConceptPresentation props_Resource_Expression;
  private ConceptPresentation props_Scaling;
  private ConceptPresentation props_Sensor;
  private ConceptPresentation props_SensorEvent;
  private ConceptPresentation props_SensorTypeEvent;
  private ConceptPresentation props_Sensor_Actuator_Type;
  private ConceptPresentation props_Sensor_Type;
  private ConceptPresentation props_Threshold_Value;
  private ConceptPresentation props_Topic;
  private ConceptPresentation props_Volume;
  private ConceptPresentation props_WorkerReference;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Action:
        if (props_Action == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Action = cpb.create();
        }
        return props_Action;
      case LanguageConceptSwitch.Actuator:
        if (props_Actuator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Actuator = cpb.create();
        }
        return props_Actuator;
      case LanguageConceptSwitch.Actuator_Type:
        if (props_Actuator_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Actuator_Type = cpb.create();
        }
        return props_Actuator_Type;
      case LanguageConceptSwitch.AdaptationRule:
        if (props_AdaptationRule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AdaptationRule = cpb.create();
        }
        return props_AdaptationRule;
      case LanguageConceptSwitch.Application:
        if (props_Application == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Application = cpb.create();
        }
        return props_Application;
      case LanguageConceptSwitch.Cloud_Node:
        if (props_Cloud_Node == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Cloud_Node = cpb.create();
        }
        return props_Cloud_Node;
      case LanguageConceptSwitch.Cluster:
        if (props_Cluster == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Cluster = cpb.create();
        }
        return props_Cluster;
      case LanguageConceptSwitch.Cluster_Reference:
        if (props_Cluster_Reference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x11dabaab0c63700aL, 0x11dabaab0c63700bL, "cluster", "", "");
          props_Cluster_Reference = cpb.create();
        }
        return props_Cluster_Reference;
      case LanguageConceptSwitch.Container:
        if (props_Container == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Container = cpb.create();
        }
        return props_Container;
      case LanguageConceptSwitch.Container_Reference:
        if (props_Container_Reference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x624a077add314f9fL, 0x624a077add314fa0L, "container", "", "");
          props_Container_Reference = cpb.create();
        }
        return props_Container_Reference;
      case LanguageConceptSwitch.Edge_Node:
        if (props_Edge_Node == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Edge_Node = cpb.create();
        }
        return props_Edge_Node;
      case LanguageConceptSwitch.Exp_LayerReg:
        if (props_Exp_LayerReg == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Exp_LayerReg");
          props_Exp_LayerReg = cpb.create();
        }
        return props_Exp_LayerReg;
      case LanguageConceptSwitch.Fog_Node:
        if (props_Fog_Node == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Fog_Node = cpb.create();
        }
        return props_Fog_Node;
      case LanguageConceptSwitch.Grammar:
        if (props_Grammar == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Grammar");
          props_Grammar = cpb.create();
        }
        return props_Grammar;
      case LanguageConceptSwitch.IoT_Device:
        if (props_IoT_Device == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IoT_Device = cpb.create();
        }
        return props_IoT_Device;
      case LanguageConceptSwitch.IoT_Device_Reference:
        if (props_IoT_Device_Reference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x13065eed5f79955cL, 0x13065eed5f79955dL, "iot_device", "", "");
          props_IoT_Device_Reference = cpb.create();
        }
        return props_IoT_Device_Reference;
      case LanguageConceptSwitch.IoT_System:
        if (props_IoT_System == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_IoT_System = cpb.create();
        }
        return props_IoT_System;
      case LanguageConceptSwitch.List_Of_Metrics:
        if (props_List_Of_Metrics == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("List_Of_Metrics");
          props_List_Of_Metrics = cpb.create();
        }
        return props_List_Of_Metrics;
      case LanguageConceptSwitch.Metric:
        if (props_Metric == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Metric = cpb.create();
        }
        return props_Metric;
      case LanguageConceptSwitch.Node:
        if (props_Node == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Node = cpb.create();
        }
        return props_Node;
      case LanguageConceptSwitch.Node_Reference:
        if (props_Node_Reference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x11dabaab0c637009L, 0x11dabaab0c63700dL, "node", "", "");
          props_Node_Reference = cpb.create();
        }
        return props_Node_Reference;
      case LanguageConceptSwitch.Num_Value:
        if (props_Num_Value == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Numerical value");
          props_Num_Value = cpb.create();
        }
        return props_Num_Value;
      case LanguageConceptSwitch.Offloading:
        if (props_Offloading == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Offloading");
          props_Offloading = cpb.create();
        }
        return props_Offloading;
      case LanguageConceptSwitch.Operate_Actuator:
        if (props_Operate_Actuator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Operate Actuator");
          props_Operate_Actuator = cpb.create();
        }
        return props_Operate_Actuator;
      case LanguageConceptSwitch.Period:
        if (props_Period == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Period");
          props_Period = cpb.create();
        }
        return props_Period;
      case LanguageConceptSwitch.QoSCluster:
        if (props_QoSCluster == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x5306924001b2832bL, 0x5306924001b2832eL, "cluster", "", "");
          props_QoSCluster = cpb.create();
        }
        return props_QoSCluster;
      case LanguageConceptSwitch.QoSContainer:
        if (props_QoSContainer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x25ba6d72b2d8c740L, 0x25ba6d72b2d8c741L, "container", "", "");
          props_QoSContainer = cpb.create();
        }
        return props_QoSContainer;
      case LanguageConceptSwitch.QoSNode:
        if (props_QoSNode == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x5306924001c7aec1L, 0x5306924001c7aec2L, "node", "", "");
          props_QoSNode = cpb.create();
        }
        return props_QoSNode;
      case LanguageConceptSwitch.QoSRegion:
        if (props_QoSRegion == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0xcbb176ababbb082L, 0x5306924001454deaL, "region", "", "");
          props_QoSRegion = cpb.create();
        }
        return props_QoSRegion;
      case LanguageConceptSwitch.QoS_Event:
        if (props_QoS_Event == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0xcbb176aba3d9f94L, 0xcbb176aba5bcfdcL, "metric", "", "");
          props_QoS_Event = cpb.create();
        }
        return props_QoS_Event;
      case LanguageConceptSwitch.Redeployment:
        if (props_Redeployment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Redeployment");
          props_Redeployment = cpb.create();
        }
        return props_Redeployment;
      case LanguageConceptSwitch.Region:
        if (props_Region == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Region = cpb.create();
        }
        return props_Region;
      case LanguageConceptSwitch.Region_Reference:
        if (props_Region_Reference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x424863e2f3693460L, 0x424863e2f369352dL, "region", "", "");
          props_Region_Reference = cpb.create();
        }
        return props_Region_Reference;
      case LanguageConceptSwitch.Resource_Expression:
        if (props_Resource_Expression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Resource_Expression = cpb.create();
        }
        return props_Resource_Expression;
      case LanguageConceptSwitch.Scaling:
        if (props_Scaling == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Scaling");
          props_Scaling = cpb.create();
        }
        return props_Scaling;
      case LanguageConceptSwitch.Sensor:
        if (props_Sensor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Sensor = cpb.create();
        }
        return props_Sensor;
      case LanguageConceptSwitch.SensorEvent:
        if (props_SensorEvent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0xcbb176abacfab9fL, 0xcbb176abacfaba0L, "sensor", "", "");
          props_SensorEvent = cpb.create();
        }
        return props_SensorEvent;
      case LanguageConceptSwitch.SensorTypeEvent:
        if (props_SensorTypeEvent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x53069240016af7c7L, 0x53069240016af7caL, "region", "", "");
          props_SensorTypeEvent = cpb.create();
        }
        return props_SensorTypeEvent;
      case LanguageConceptSwitch.Sensor_Actuator_Type:
        if (props_Sensor_Actuator_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Sensors And Actuator Types");
          props_Sensor_Actuator_Type = cpb.create();
        }
        return props_Sensor_Actuator_Type;
      case LanguageConceptSwitch.Sensor_Type:
        if (props_Sensor_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Sensor_Type = cpb.create();
        }
        return props_Sensor_Type;
      case LanguageConceptSwitch.Threshold_Value:
        if (props_Threshold_Value == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Threshold value");
          props_Threshold_Value = cpb.create();
        }
        return props_Threshold_Value;
      case LanguageConceptSwitch.Topic:
        if (props_Topic == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Topic = cpb.create();
        }
        return props_Topic;
      case LanguageConceptSwitch.Volume:
        if (props_Volume == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Volume = cpb.create();
        }
        return props_Volume;
      case LanguageConceptSwitch.WorkerReference:
        if (props_WorkerReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x6175b41c53adc1a5L, 0x6175b41c53adc1a6L, "worker", "", "");
          props_WorkerReference = cpb.create();
        }
        return props_WorkerReference;
    }
    return null;
  }
}
