package IoT_runtime.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public final class Sensor_Type__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6859b3L, "IoT_runtime.structure.Sensor_Type");

  public static final SMethod<Boolean> checkRegion_id5c6$$01W3Px = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("checkRegion").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("5c6$$01W3Px").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(checkRegion_id5c6$$01W3Px);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean checkRegion_id5c6$$01W3Px(@NotNull SNode __thisNode__, SNode r) {
    for (SNode s : SNodeOperations.ofConcept(SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(r, CONCEPTS.IoT_System$Z$, false, false), LINKS.IoTDevices$XO04), CONCEPTS.Sensor$8w)) {
      if (SLinkOperations.getTarget(s, LINKS.type$LV3W) == __thisNode__) {
        for (SNode reg : SLinkOperations.getChildren(s, LINKS.regions$svWv)) {
          if (SLinkOperations.getTarget(reg, LINKS.region$yC9l) == r) {
            return true;
          }
          for (SNode regi : SNodeOperations.getNodeDescendants(r, CONCEPTS.Region$Qk, false, new SAbstractConcept[]{})) {
            if (SLinkOperations.getTarget(reg, LINKS.region$yC9l) == regi) {
              return true;
            }
          }
        }
      }
    }
    return false;
  }

  /*package*/ Sensor_Type__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) checkRegion_id5c6$$01W3Px(node, (SNode) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink region$yC9l = MetaAdapterFactory.getReferenceLink(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x424863e2f3693460L, 0x424863e2f369352dL, "region");
    /*package*/ static final SContainmentLink regions$svWv = MetaAdapterFactory.getContainmentLink(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c687594L, 0x6a28ca9e36a4d858L, "regions");
    /*package*/ static final SReferenceLink type$LV3W = MetaAdapterFactory.getReferenceLink(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6875c5L, 0x23381bd32c6875c8L, "type");
    /*package*/ static final SContainmentLink IoTDevices$XO04 = MetaAdapterFactory.getContainmentLink(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6857a2L, 0x6175b41c53adc0f4L, "IoTDevices");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Region$Qk = MetaAdapterFactory.getConcept(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x6175b41c53adc15cL, "IoT_runtime.structure.Region");
    /*package*/ static final SConcept IoT_System$Z$ = MetaAdapterFactory.getConcept(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6857a2L, "IoT_runtime.structure.IoT_System");
    /*package*/ static final SConcept Sensor$8w = MetaAdapterFactory.getConcept(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6875c5L, "IoT_runtime.structure.Sensor");
  }
}
