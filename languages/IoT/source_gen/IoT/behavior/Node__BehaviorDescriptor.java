package IoT.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class Node__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c685983L, "IoT.structure.Node");

  public static final SMethod<Boolean> sameName_id3N5eeeLPxzb = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("sameName").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3N5eeeLPxzb").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Integer> availableMemory_id5c6$$011Azd = new SMethodBuilder<Integer>(new SJavaCompoundTypeImpl(Integer.TYPE)).name("availableMemory").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5c6$$011Azd").build();
  public static final SMethod<Integer> availableCPU_id5c6$$016dlQ = new SMethodBuilder<Integer>(new SJavaCompoundTypeImpl(Integer.TYPE)).name("availableCPU").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5c6$$016dlQ").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(sameName_id3N5eeeLPxzb, availableMemory_id5c6$$011Azd, availableCPU_id5c6$$016dlQ);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean sameName_id3N5eeeLPxzb(@NotNull SNode __thisNode__, SNode n) {
    if (SPropertyOperations.getString(__thisNode__, PROPS.name$MnvL).equals(SPropertyOperations.getString(n, PROPS.name$MnvL))) {
      return true;
    }
    return false;
  }
  /*package*/ static int availableMemory_id5c6$$011Azd(@NotNull SNode __thisNode__) {
    int memory = 0;
    for (SNode c : SLinkOperations.getChildren(__thisNode__, LINKS.containers$eu$n)) {
      memory = memory + SPropertyOperations.getInteger(c, PROPS.memoryLimit$Pi9U);
    }
    return (SPropertyOperations.getInteger(__thisNode__, PROPS.memory$iHkq) - memory);
  }
  /*package*/ static int availableCPU_id5c6$$016dlQ(@NotNull SNode __thisNode__) {
    int cpu = 0;
    for (SNode c : SLinkOperations.getChildren(__thisNode__, LINKS.containers$eu$n)) {
      cpu = cpu + SPropertyOperations.getInteger(c, PROPS.cpuLimit$PhFS);
    }
    return (SPropertyOperations.getInteger(__thisNode__, PROPS.cpuCores$iGom) - cpu);
  }

  /*package*/ Node__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) sameName_id3N5eeeLPxzb(node, (SNode) parameters[0]));
      case 1:
        return (T) ((Integer) availableMemory_id5c6$$011Azd(node));
      case 2:
        return (T) ((Integer) availableCPU_id5c6$$016dlQ(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty memoryLimit$Pi9U = MetaAdapterFactory.getProperty(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x330981c29fe0fb09L, 0x78a11bdb8b481cc0L, "memoryLimit");
    /*package*/ static final SProperty memory$iHkq = MetaAdapterFactory.getProperty(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c685983L, 0x23381bd32c68598fL, "memory");
    /*package*/ static final SProperty cpuLimit$PhFS = MetaAdapterFactory.getProperty(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x330981c29fe0fb09L, 0x78a11bdb8b481cbeL, "cpuLimit");
    /*package*/ static final SProperty cpuCores$iGom = MetaAdapterFactory.getProperty(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c685983L, 0x23381bd32c68598bL, "cpuCores");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink containers$eu$n = MetaAdapterFactory.getContainmentLink(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c685983L, 0x6175b41c53adc168L, "containers");
  }
}
