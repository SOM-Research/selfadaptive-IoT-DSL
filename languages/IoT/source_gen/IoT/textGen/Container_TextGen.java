package IoT.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class Container_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("apiVersion: v1");
    tgs.newLine();
    tgs.append("kind: Pod");
    tgs.newLine();
    tgs.append("metadata:");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("name: ");
    tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), PROPS.name$MnvL));
    tgs.newLine();
    tgs.indent();
    tgs.append("labels:");
    tgs.newLine();
    tgs.indent();
    tgs.indent();
    tgs.append("app: ");
    tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), PROPS.name$MnvL));
    tgs.append("-");
    tgs.append(SPropertyOperations.getString(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.application$GqFB), PROPS.name$MnvL));
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("spec:");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("containers:");
    tgs.newLine();
    tgs.indent();
    tgs.indent();
    tgs.append("- name: ");
    tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), PROPS.name$MnvL));
    tgs.newLine();
    tgs.indent();
    tgs.indent();
    tgs.indent();
    tgs.append("image: ");
    tgs.append(SPropertyOperations.getString(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.application$GqFB), PROPS.imageRepo$cH0I));
    tgs.newLine();
    tgs.indent();
    tgs.indent();
    tgs.indent();
    tgs.append("ports:");
    tgs.newLine();
    tgs.indent();
    tgs.indent();
    tgs.indent();
    tgs.indent();
    tgs.append("- containerPort: ");
    tgs.append("" + SPropertyOperations.getInteger(ctx.getPrimaryInput(), PROPS.internalPort$9RyM));
    tgs.newLine();
    tgs.indent();
    tgs.append("nodeSelector:");
    tgs.newLine();
    tgs.indent();
    tgs.indent();
    tgs.append("  node: ");
    tgs.append(SPropertyOperations.getString(SNodeOperations.getNodeAncestor(ctx.getPrimaryInput(), CONCEPTS.Node$uW, false, false), PROPS.name$MnvL));
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("---");
    tgs.newLine();
    tgs.append("apiVersion: v1");
    tgs.newLine();
    tgs.append("kind: Service");
    tgs.newLine();
    tgs.append("metadata:");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("name: ");
    tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), PROPS.name$MnvL));
    tgs.append("-entrypoint");
    tgs.newLine();
    tgs.indent();
    tgs.append("namespace: default");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("spec:");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("type: NodePort");
    tgs.newLine();
    tgs.indent();
    tgs.append("selector:");
    tgs.newLine();
    tgs.indent();
    tgs.indent();
    tgs.append("app: ");
    tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), PROPS.name$MnvL));
    tgs.append("-");
    tgs.append(SPropertyOperations.getString(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.application$GqFB), PROPS.name$MnvL));
    tgs.newLine();
    tgs.indent();
    tgs.append("ports:");
    tgs.newLine();
    tgs.indent();
    tgs.append("- port: ");
    tgs.append("" + SPropertyOperations.getInteger(ctx.getPrimaryInput(), PROPS.internalPort$9RyM));
    tgs.newLine();
    tgs.indent();
    tgs.append("  nodePort: ");
    tgs.append("" + SPropertyOperations.getInteger(ctx.getPrimaryInput(), PROPS.externalPort$9SuQ));
    tgs.newLine();
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("---");
    tgs.newLine();
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty imageRepo$cH0I = MetaAdapterFactory.getProperty(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c6857a6L, 0x330981c29fe0fb05L, "imageRepo");
    /*package*/ static final SProperty internalPort$9RyM = MetaAdapterFactory.getProperty(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x330981c29fe0fb09L, 0x4dd57832eb2d931eL, "internalPort");
    /*package*/ static final SProperty externalPort$9SuQ = MetaAdapterFactory.getProperty(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x330981c29fe0fb09L, 0x4dd57832eb2d9322L, "externalPort");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink application$GqFB = MetaAdapterFactory.getReferenceLink(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x330981c29fe0fb09L, 0x6175b41c53adc198L, "application");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Node$uW = MetaAdapterFactory.getConcept(0x222ccd66f9d64014L, 0x8569354bddee8138L, 0x23381bd32c685983L, "IoT.structure.Node");
  }
}
